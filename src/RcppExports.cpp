// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// adaptiveWeightsCpp
NumericMatrix adaptiveWeightsCpp(NumericMatrix eigenSpec, NumericVector ev, int k, int nFFT);
RcppExport SEXP transfer_adaptiveWeightsCpp(SEXP eigenSpecSEXP, SEXP evSEXP, SEXP kSEXP, SEXP nFFTSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type eigenSpec(eigenSpecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ev(evSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type nFFT(nFFTSEXP);
    rcpp_result_gen = Rcpp::wrap(adaptiveWeightsCpp(eigenSpec, ev, k, nFFT));
    return rcpp_result_gen;
END_RCPP
}
// absCplx
double absCplx(Rcomplex x);
RcppExport SEXP transfer_absCplx(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcomplex >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(absCplx(x));
    return rcpp_result_gen;
END_RCPP
}
// coherencyOffsetCpp
ComplexMatrix coherencyOffsetCpp(ComplexMatrix ykx, ComplexMatrix yky, ComplexMatrix dx, ComplexMatrix dy, int nTaper, int nFreqRange, int nOffset, IntegerVector range2Start, IntegerVector freqRangeIdx, bool forwardCoh);
RcppExport SEXP transfer_coherencyOffsetCpp(SEXP ykxSEXP, SEXP ykySEXP, SEXP dxSEXP, SEXP dySEXP, SEXP nTaperSEXP, SEXP nFreqRangeSEXP, SEXP nOffsetSEXP, SEXP range2StartSEXP, SEXP freqRangeIdxSEXP, SEXP forwardCohSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ComplexMatrix >::type ykx(ykxSEXP);
    Rcpp::traits::input_parameter< ComplexMatrix >::type yky(ykySEXP);
    Rcpp::traits::input_parameter< ComplexMatrix >::type dx(dxSEXP);
    Rcpp::traits::input_parameter< ComplexMatrix >::type dy(dySEXP);
    Rcpp::traits::input_parameter< int >::type nTaper(nTaperSEXP);
    Rcpp::traits::input_parameter< int >::type nFreqRange(nFreqRangeSEXP);
    Rcpp::traits::input_parameter< int >::type nOffset(nOffsetSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type range2Start(range2StartSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type freqRangeIdx(freqRangeIdxSEXP);
    Rcpp::traits::input_parameter< bool >::type forwardCoh(forwardCohSEXP);
    rcpp_result_gen = Rcpp::wrap(coherencyOffsetCpp(ykx, yky, dx, dy, nTaper, nFreqRange, nOffset, range2Start, freqRangeIdx, forwardCoh));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_hello_world
List rcpp_hello_world();
RcppExport SEXP transfer_rcpp_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpp_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// sftCpp
arma::cx_double sftCpp(arma::cx_vec x, arma::cx_double f, arma::cx_vec time);
RcppExport SEXP transfer_sftCpp(SEXP xSEXP, SEXP fSEXP, SEXP timeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cx_vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::cx_double >::type f(fSEXP);
    Rcpp::traits::input_parameter< arma::cx_vec >::type time(timeSEXP);
    rcpp_result_gen = Rcpp::wrap(sftCpp(x, f, time));
    return rcpp_result_gen;
END_RCPP
}
// olsTf
arma::cx_mat olsTf(List x, List y, arma::cx_vec time, int n, int npredictor, int ntaper, arma::cx_vec freq, arma::cx_vec fOffset);
RcppExport SEXP transfer_olsTf(SEXP xSEXP, SEXP ySEXP, SEXP timeSEXP, SEXP nSEXP, SEXP npredictorSEXP, SEXP ntaperSEXP, SEXP freqSEXP, SEXP fOffsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< List >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::cx_vec >::type time(timeSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type npredictor(npredictorSEXP);
    Rcpp::traits::input_parameter< int >::type ntaper(ntaperSEXP);
    Rcpp::traits::input_parameter< arma::cx_vec >::type freq(freqSEXP);
    Rcpp::traits::input_parameter< arma::cx_vec >::type fOffset(fOffsetSEXP);
    rcpp_result_gen = Rcpp::wrap(olsTf(x, y, time, n, npredictor, ntaper, freq, fOffset));
    return rcpp_result_gen;
END_RCPP
}
// olsTfEigen
arma::cx_mat olsTfEigen(List x, List y, arma::ivec freqIdx, List fOffsetIdxLst);
RcppExport SEXP transfer_olsTfEigen(SEXP xSEXP, SEXP ySEXP, SEXP freqIdxSEXP, SEXP fOffsetIdxLstSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< List >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type freqIdx(freqIdxSEXP);
    Rcpp::traits::input_parameter< List >::type fOffsetIdxLst(fOffsetIdxLstSEXP);
    rcpp_result_gen = Rcpp::wrap(olsTfEigen(x, y, freqIdx, fOffsetIdxLst));
    return rcpp_result_gen;
END_RCPP
}
